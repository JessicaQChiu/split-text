/* NOTES
* Information mostly sourced from MDN web docs - https://developer.mozilla.org/en-US/
*
*    * is a universal selector, selects all elements. 
*
*    CSS pseudo-elements
*    A CSS pseudo-element is a keyword added to a selector that lets you style a specific part of the selected element(s). Pseudo-elements defined by a set of CSS specifications.
*        - ::before and ::after are CSS pseudo elements. 
*        - for an element to actually generate a ::before or ::after, its content must be something other than none.

*        - The :nth-child() CSS pseudo-class matches elements based on their position among a group of siblings.
*
*    CSS box-sizing behavior
*    By default in the CSS box model, the width and height you assign to an element is applied only to the element's content box.
*        - border-box: CSS property where the element's width and height properties include the content, padding, and border, but do not include the margin. 
*
*
*    Position CSS property
*    The position CSS property sets how an element is positioned in a document. 
*    The top, right, bottom, and left properties determine the final location of positioned elements.
*        - static: this is the default value. The element is positioned according to the normal flow of the document. The top, right, bottom, left, and z-index properties have no effect. 
*        - relative: the element is positioned according to the normal flow of the document, and then offset relative to itself based on the values of top, right, bottom, and left. The offset does not affect the position of any other elements.
*        - absolute: the element is removed from the normal document flow, and no space is created for the element in the page layout. Positioned relative to its closest positioned ancestor, if any; otherwise, it is placed relative to the initial containing block. Its final position is determined by the values of top, right, bottom, and left.
*        - fixed: the element is removed from the normal document flow, and no space is created for the element in the page layout. Positioned relative to the initial containing block established by the viewport.
*        - sticky: the element is positioned according to the normal flow of the document, and then offset relative to its nearest scrolling ancestor and containing block.
*   
*    Display
*    The display CSS property sets whether an element is treated as a block or inline element and the layout used for its children, such as flow layout, grid or flex.
*        - block: the element generates a block element box, generating line breaks both before and after the element when in the normal flow.
*        - inline: the element generates one or more inline element boxes that do not generate line breaks before or after themselves. In normal flow, the next element will be on the same line if there is space.
*
*    Flexbox
*    The Flexible Box Module, usually referred to as flexbox, was designed as a one-dimensional layout model.
*    An area of a document laid out using flexbox is called a flex container. 
*    To create a flex container, we set the value of the area's container's display property to flex or inline-flex. As soon as we do this the direct children of that container become flex items.
*    Adding the flex-direction property to the flex container allows us to change the direction in which our flex items display.
*        - If we change flex-direction to column the main axis switches and our items now display in a column. Set column-reverse and the start and end lines are again switched.
*
*    justify-content — controls alignment of all items on the main axis/primary axis (x axis).
*    align-items — controls alignment of all items on the cross axis/secondary axis (y axis).
*
*    CSS scalable units    
*        - em is a CSS unit relative to the font size of the parent element.
*        - rem is a CSS unit relative to the font size of an html element.
*
*    The clip-path CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.
*        - inset(): defines an inset rectangle.
*
*/

/*imports main font used from Google Fonts, designed by Héctor Gatti and the Omnibus-Type Team*/
@import url('https://fonts.googleapis.com/css?family=Archivo+Black&display=swap');

*,
*::after,
*::before {
  box-sizing: border-box;
}

body {
  font-family: 'Archivo Black', sans-serif;
  background-color: #0e0c16;
}

.container {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
}

.content {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
}

h1 {
  font-size: 6em;
  font-weight: 900;
  background-color: #6ae1ff;
  color: #0e0c16;
  display: block;
  padding: 0.25em;
}

h1:nth-child(1) {
  position: absolute;
  background-color: #0e0c16;
  color: #6ae1ff;
  clip-path: inset(-1% -1% 50% -1%);
}

p {
  text-align: center;
  background-color: #0e0c16;
  color: #6ae1ff;
}

p span {
  margin-right: 5px;  
  padding: 0px 5px 0px 5px;
  background-color: #6ae1ff;
  color: #0e0c16;
}